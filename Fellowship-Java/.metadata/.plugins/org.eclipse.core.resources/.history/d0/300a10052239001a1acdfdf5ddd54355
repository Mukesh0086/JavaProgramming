package com.bridgelabz.dataStructures;

import com.bridgelabz.utility.Utility;

public class BankingCounter {
	static Node head;
	

	static class Node {
		double data;
		Node next;
	}

	public static void main(String[] args) {

		System.out.println("Welcome to Bank of hell");
		System.out.println("press 1 to deposit and 2 to withdraw");
		int choice = Utility.readInteger();
		
		enQueue(1000);
		enQueue(500);
		

		double totalBalance = 0;
		if (choice == 1) {
			System.out.println("Enter the amount to deposit or withdraw");
			double amount = Utility.readDouble();
			enQueue(amount);
			display();

			

		} else {

			dequeue();
			display();
			
			

		}
		
	}

	
	
	
	public static void enQueue(double amount)
	{
		Node node=new Node();
		node.data=amount;
		node.next=null;
		Node front=head;
		Node rear=head;
		if(rear==null)
		{
			rear=node;
			front=node;
		}
		else
		{
			
			rear.next=node;
			rear=node;
			
		}
	}

	public static void deQueue() {
		head = head.next;

	}

	public static void dequeue() {
		head = head.next;

	}

	public static double display() {
		double balance=0.0;
		
		
		if (head == null) {
			System.out.println("empty");
			
		} else {
			Node n = head;
			while (n.next != null) {
				
				System.out.println(n.data);
				balance=balance+n.data;
				n = n.next;
			}
			System.out.println(n.data);
			balance=balance+n.data;
		}
		System.out.println("balance is"+balance);
		return balance;

	}

	/*public static double balance() {
		double balance = 0.0;
		if (head == null) {
			balance = 0;
		} 
		else {
			Node n = head;

			while (n.next != null) {

				balance = balance + (double) n.data;
				System.out.println(n.data);
				n = n.next;
			}
			balance=balance+n.data;

		}
		return balance;
	}*/

}
