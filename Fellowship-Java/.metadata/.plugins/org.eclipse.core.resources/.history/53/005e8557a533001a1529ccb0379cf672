package com.bridgelabz.utility;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;



public class Utility {
	
	private static final Scanner SCAN=new Scanner(System.in);
	
	/*creating a Scanner object to use it across the project
	 * Scanner object is made final value cannot be changed
	 */
	
	private static final Logger LOG=Logger.getLogger(Utility.class.getName());
	
	/*creating a Logger object for the utility class
	 * to log informations and warnings
	 */
	
	public static int readInteger()
	{
		//Utility.LOG.info("readInteger() method called");
		return SCAN.nextInt(); 		//Scanner object to input Integer 
	}
	public static double readDouble()
	{
		return SCAN.nextDouble();		//Scanner object to input Double 
	}
	public static long readLong()
	{
		return SCAN.nextLong();		//Scanner object to input Long 
	}
	public static String readString()
	{
		return SCAN.nextLine();		//Scanner object to input String 
	}
	public static float readFloat()
	{
		return SCAN.nextFloat();		//Scanner object to input Float
	}
	
	
	/* The below flipsCoin method will take number of turns as input and generate
	 * a random value for each turns equate to head or possibility and returns the 
	 * percentage. 	
	 */
	
	public static int flipsCoin(int turns)
	{
		int head=0,tail=0;
		
		while(turns>0)
		{
			double result=Math.random();
			if(result>0.5)
			{
				head=head+1;
			}
			else
			{
				tail=tail+1;
			}
			turns=turns-1;
		}
		
		return ((head*100)/tail);
	}
	
	
	/* The below harmonicMean method will take number as input and generate
	 * the summation of harmonic mean and returns the summation upto numberth 
	 * terms.(Double value) 	
	 */
	
	public static double harmonicMean(int number) {
		
		double sum = 0.0;

		for (int i = 1; i <=number; i++) { 
			sum = sum +1.0 / i; 
		} 
		return   sum; 
	}
	
	
	/* The below isLeapYear method will take year as input and process the 
	 * conditions. If condition is passed flag is set to true else false  	
	 */
	
	public static boolean isLeapYear(int year)
	{
		boolean flag=false;
		if((year%4==0) && (year%100!=0) || (year%400==0) && (year%100!=0))
		{
			flag=true;
		}
		return flag;
		
	}
	
	
	/* The below power method will take exponent input and generate
	 * the value of 2 to the power of exponent. The functions works upto 2 to the power
	 * of 31, since thats the limit of Integer datatype. 	
	 */
	
	public static int power(int exp) {
	
		int base=2,result=1;
		for(int i=1;i<=exp;i++)
		{
			result=result*2;
		}
		return result;
	}
	
	
	/* The below primefactors method takes a number and calculate the number of
	 * the number and each prime factor is stored in a ArrayList which is returned
	 */
	
	
	public static ArrayList<Integer> primeFactors(int number)
	{
		int i=0;
		ArrayList<Integer> factorList=new ArrayList<Integer>();
		while(number>1)
		{
			for(i=2;i<=number;i++)
			{
				if(number%i==0)
				{
					number=number/i;
					factorList.add(i);
					break;
				}
			}
		}
		return factorList;
		
	}
	
	
	/* The below replace method takes a replace string and replaces <<username>>
	 * with replace string value 	
	 */
	
	public static String replace(String str,String replace)
	{
		return str.replaceFirst("<<username>>",replace);
	}
	

	/* The below sum of euclideanDistance Method takes two arguments x and y and 
	 * calculate the euclidean distance from origin to x and y  	
	 */
	
	public static double euclideanDistance(int x,int y)
	{
		return Math.sqrt(Math.pow(x, 2)+Math.pow(y, 2));
	}
	
	
	/* The below QuadriaticRoots method will take 3 integer as input and calculate
	 * the two roots of the Quadriatic equation created those 3 integers 
	 * and returns a Hashmap 	
	 */
	
	public static HashMap<String,Float> QuadriaticRoots(int a,int b,int c)
	{
		
		HashMap<String, Float> roots=new HashMap();
		float root1=0,root2=0;
		root1=(float) ((-b+Math.sqrt(b*b-4*a*c))/2*a);
		root2=(float) ((-b-Math.sqrt(b*b-4*a*c))/2*a);
		roots.put("root1", root1);
		roots.put("root2", root2);
		return roots;
	}
	
	
	/* The below sum of three numbers equals 0 method takes one integer array 
	 * iterate through it and if sum equals 0 the value ,the numbers are stored 
	 * in arraylist 	
	 */
	
	public static ArrayList<Integer> sumOfThreeNumberEqualsZero(int [] arr){
		ArrayList<Integer> list=new ArrayList<Integer>();
		int length=arr.length;
		for(int i=0;i<length;i++)
		{
			for(int j=i+1;j<length;j++)
			{
				for(int k=j+1;k<length;k++)
				{
					if(arr[i]+arr[j]+arr[k]==0)
					{
						list.add(arr[i]); //adding values  arraylist
						list.add(arr[j]);
						list.add(arr[k]);
					}
				}
			}
		}
		
		return list;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	


}
